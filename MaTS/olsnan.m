function [b,vb,u,r2,tstat,tprob]=olsnan(y,x,intercept,labels)%  OLS regression deleting any row including a missing observation%    [b,vb,u,r2,tstat,tprob]=olsnan(y,x [,intercept] [,labels] )%%  Inputs:   y (T x 1) vector, x (T x k) vector,%  	     intercept = 1 to include a constant, =0 else%	     labels .. optional naming of variables. Names%			as array of cellstr. First entry: name of y%%  Output:  b       .. parameter estimates%	    vb      .. 95% confidence interval%	    s2	    .. residual variance%           tstat   .. t-stats associated with the parameter vector%% (c) wo_sch.n=size(x,1);nold = n;k=size(x,2);% --- initial checks for inputs ----if nargin==2   intercept=0;   labels=[];elseif nargin==3   if isstr(intercept)      labels=intercept;      intercept=0;  else    labels = '';   endendif isempty(labels)   nolabels=1;   labels=sprintf('X%-3i',1:k);   labels=reshape(labels,4,k)';   labels=str2mat('Y',labels);   labels=cellstr(labels);else   if (length(labels) == k)      labels={'Z',labels{:}};  end;   nolabels=0;end% ---- check if user supplied intercept!if ~intercept   mx = nanstd(x);   ind = find(mx==0); if isempty(ind)      intercept=0;  else    intercept=1;   end;else   labels={labels{1},'C',labels{2:end}};   x=[ones(n,1),x];endk = size(x,2);% --- throw away the NaN rows ---sum(isnan([y,x]'));ind = find(sum(isnan([y,x]'))==0);x=x(ind,:);y=y(ind,:);n=length(ind);% --- calculate the regression ---sxx=x'*x;vb=inv(sxx);b=vb*(x'*y);u=y-x*b;% -- residual variance ----syy=y'*y;my=mean(y);n=length(y)-sum(isnan(y));sy=sqrt((syy-n*my^2)/(n-1));suu=syy-b'*sxx*b;s2=suu/(n-k);vb=vb*s2;% --- confidence band for the parameters ----sb=sqrt(diag(vb));tstat=b./sb;tprob=2*(1-tcdf(abs(tstat),n-k));% --- R2 and the like ---if intercept   r2=1-suu/(syy-n*my^2);   r2adj=r2*(n-k+1)/n;   fstat=((syy-n*my^2-suu)/(k-1))/s2;   df=[k-1,n-k];else   r2=1-suu/syy;   r2adj=r2*(n-k)/n;   fstat=((syy-suu)/k)/s2;   df=[k,n-k];endfprob=1-fcdf(fstat,df(1),df(2));% ---- infrmation criteria ------bic=log(s2);aic=bic+2*k/n;bic=bic+log(n)*k/n;ll=-(log(2*pi)+n*log(s2)+n)/2;% ---   Durbin Watson ----------dwstat=sum( (u(1:n-1)-u(2:n)).^2 )/suu;% --- correct residuals ---u_o=u;clear u;u = ones(nold,1)*NaN;u(ind)=u_o;% --- print out the results -------labels={'Variable',labels{:}};if nolabels   fprintf('\nOLS:\nDate: %s\n',datestr(now,0));else   fprintf('\nOLS: Dependent Variable is %s\nDate: %s\n',labels{2},datestr(now,0));end   fprintf('Number of observations: %1.0f\nNumber of independent Variables: %1.0f\n\n',n,k);fprintf('%s  Coefficient    Std.Error  t-Stat.(%2i)   Prob.\n',labels{1},n-k);for i=1:k   fprintf('%s %13s %13s %13s %8.4f\n',labels{i+2},...      cprint(12,b(i)),cprint(12,sb(i)),cprint(12,tstat(i)),tprob(i));endfprintf('\n');fprintf('R-squared            %s     Adjusted R-squared   %s\n',...   cprint(9,r2),cprint(9,r2adj));fprintf('Mean dependent var   %s     S.D. dependent var   %s\n',...   cprint(9,my),cprint(9,sy));fprintf('S.E. of regression   %s     Sum squared resid    %s\n',...   cprint(9,sqrt(s2)),cprint(9,suu));fprintf('F-statistic(%2i,%2i)   %s     Prob(F-statistic)    %9.6f\n',...   df,cprint(9,fstat),fprob);fprintf('Log likelihood       %s     Durbin-Watson stat   %9.6f\n',...   cprint(9,ll),dwstat);fprintf('AIC                  %s     BIC                  %s\n',...   cprint(9,aic),cprint(9,bic));